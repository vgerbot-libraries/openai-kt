package com.vgerbot.openai.model

/**
 *
 * @property model ID of the model to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`.
 * @property question Question to get answered.
 * @property examples List of (question, answer) pairs that will help steer the model towards the tone and answer format you\'d like. We recommend adding 2 to 3 examples.
 * @property examples_context A text snippet containing the contextual information used to generate the answers for the `examples` you provide.
 * @property documents List of documents from which the answer for the input `question` should be derived. If this is an empty list, the question will be answered based on the question-answer examples.  You should specify either `documents` or a `file`, but not both.
 * @property file The ID of an uploaded file that contains documents to search over. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.  You should specify either `documents` or a `file`, but not both.
 * @property search_model ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
 * @property max_rerank The maximum number of documents to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
 * @property temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
 * @property logprobs Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.  When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
 * @property max_tokens The maximum number of tokens allowed for the generated answer
 * @property stop
 * @property n How many answers to generate for each question.
 * @property logit_bias Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the  token from being generated.
 * @property return_metadata A special boolean flag for showing metadata.
 * If set to `true`, each document entry in the returned JSON will contain a \"metadata\" field.  This flag only takes effect when `file` is set.
 * @property return_prompt If set to `true`, the returned JSON will include a \"prompt\" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
 * @property expand If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
 * @property user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
 */
data class CreateAnswerRequest(
    val model: String,
    val question: String,
    val examples: List<Any>,
    val examples_context: String,
    val documents: List<String>? = null,
    val file: String? = null,
    val search_model: String? = null,
    val max_rerank: Int? = null,
    val temperature: Double? = null,
    val logprobs: Int? = null,
    val max_tokens: Int? = null,
    val stop: CreateAnswerRequestStop? = null,
    val n: Int? = null,
    val logit_bias: Map<String, Any>? = null,
    val return_metadata: Boolean? = null,
    val return_prompt: Boolean? = null,
    val expand: List<Any>? = null,
    val user: String? = null
)

/**
 * Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
 */
sealed class CreateAnswerRequestStop {
    data class MultipleStops(val stops: List<String>) : CreateAnswerRequestStop()
    data class SingleStop(val stop: String) : CreateAnswerRequestStop()
}

data class CreateAnswerResponse(
    val `object`: String? = null,
    val model: String? = null,
    val search_model: String? = null,
    val completion: String? = null,
    val answers: List<String>? = null,
    val selected_documents: List<CreateAnswerResponseSelectedDocumentsInner>? = null
)

data class CreateAnswerResponseSelectedDocumentsInner(
    val document: Int? = null,
    val text: String? = null
)
