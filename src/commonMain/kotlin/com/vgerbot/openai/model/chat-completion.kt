package com.vgerbot.openai.model

/**
 *
 * @property role The role of the author of this message.
 * @property content The contents of the message
 * @property name The name of the user in a multi-user chat
 */
data class ChatCompletionRequestMessage(
    val role: ChatCompletionRequestMessageRoleEnum,
    val content: String,
    val name: String? = null
)

enum class ChatCompletionRequestMessageRoleEnum(val value: String) {
    System("system"),
    User("user"),
    Assistant("assistant")
}

/**
 *
 * @property role The role of the author of this message.
 * @property content The contents of the message
 */
data class ChatCompletionResponseMessage(
    val role: ChatCompletionResponseMessageRoleEnum,
    val content: String
)

enum class ChatCompletionResponseMessageRoleEnum(val value: String) {
    System("system"),
    User("user"),
    Assistant("assistant")
}

/**
 * @property model ID of the model to use. Currently, only `gpt-3.5-turbo` and `gpt-3.5-turbo-0301` are supported.
 * @property messages The messages to generate chat completions for, in the [chat format](/docs/guides/chat/introduction).
 * @property temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
 * @property top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
 * @property n How many chat completion choices to generate for each input message.
 * @property stream If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
 * @property stop Up to 4 sequences where the API will stop generating further tokens.
 * @property max_tokens The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
 * @property presence_penalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
 * @property frequency_penalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
 * @property logit_bias Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
 * @property user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
 */
data class CreateChatCompletionRequest(
    val model: String,
    val messages: List<ChatCompletionRequestMessage>,
    val temperature: Double? = null,
    val top_p: Double? = null,
    val n: Int? = null,
    val stream: Boolean? = null,
    val stop: CreateChatCompletionRequestStop? = null,
    val max_tokens: Int? = null,
    val presence_penalty: Double? = null,
    val frequency_penalty: Double?,
    val logit_bias: Map<String, Double>? = null,
    val user: String? = null
)

typealias CreateChatCompletionRequestStop = List<String>

data class CreateChatCompletionResponse(
    val id: String,
    val `object`: String,
    val created: Int,
    val model: String,
    val choices: List<CreateChatCompletionResponseChoicesInner>,
    val usage: CreateCompletionResponseUsage? = null
)

data class CreateChatCompletionResponseChoicesInner(
    val index: Int? = null,
    val message: ChatCompletionResponseMessage? = null,
    val finish_reason: String? = null
)
