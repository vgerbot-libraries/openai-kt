package com.vgerbot.openai.model

/**
 * @property model ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
 * @property prompt The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that  is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
 * @property suffix The suffix that comes after a completion of inserted text.
 * @property max_tokens The maximum number of [tokens](/tokenizer) to generate in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096).
 * @property temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
 * @property top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
 * @property n How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
 * @property stream Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
 * @property logprobs Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
 * @property echo Echo back the prompt in addition to the completion
 * @property stop Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
 * @property presence_penalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
 * @property frequency_penalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
 * @property best_of Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
 * @property logit_bias Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the  token from being generated.
 * @property user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
 */
data class CreateCompletionRequest(
    val model: String,
    val prompt: CreateCompletionRequestPrompt? = null,
    val suffix: String? = null,
    val max_tokens: Int? = null,
    val temperature: Double? = null,
    val top_p: Double? = null,
    val n: Int? = null,
    val stream: Boolean? = null,
    val logprobs: Int? = null,
    val echo: Boolean? = null,
    val stop: CreateCompletionRequestStop? = null,
    val presence_penalty: Double? = null,
    val frequency_penalty: Double? = null,
    val best_of: Int? = null,
    val logit_bias: Map<String, Double>? = null,
    val user: String? = null
)

sealed class CreateCompletionRequestPrompt {
    data class ArrayAny(val value: Array<Any>) : CreateCompletionRequestPrompt()
    data class ArrayNumber(val value: Array<Int>) : CreateCompletionRequestPrompt()
    data class ArrayString(val value: Array<String>) : CreateCompletionRequestPrompt()
    data class StringValue(val value: String) : CreateCompletionRequestPrompt()
}

sealed class CreateCompletionRequestStop {
    data class ArrayString(val value: Array<String>) : CreateCompletionRequestStop()
    data class StringValue(val value: String) : CreateCompletionRequestStop()
}

/**
 *
 * @property id
 * @property object
 * @property created
 * @property model
 * @property choices
 * @property usage
 */
data class CreateCompletionResponse(
    val id: String,
    val `object`: String,
    val created: Int,
    val model: String,
    val choices: List<CreateCompletionResponseChoicesInner>,
    val usage: CreateCompletionResponseUsage?
)

/**
 *
 * @property text
 * @property index
 * @property logprobs
 * @property finish_reason
 */
data class CreateCompletionResponseChoicesInner(
    val text: String?,
    val index: Int?,
    val logprobs: CreateCompletionResponseChoicesInnerLogprobs?,
    val finish_reason: String?
)

/**
 *
 * @property tokens
 * @property token_logprobs
 * @property top_logprobs
 * @property text_offset
 */
data class CreateCompletionResponseChoicesInnerLogprobs(
    val tokens: List<String>?,
    val token_logprobs: List<Double>?,
    val top_logprobs: List<Map<String, Any>>?,
    val text_offset: List<Int>?
)

/**
 *
 * @property prompt_tokens
 * @property completion_tokens
 * @property total_tokens
 */
data class CreateCompletionResponseUsage(
    val prompt_tokens: Int,
    val completion_tokens: Int,
    val total_tokens: Int
)
