package com.vgerbot.openai.api

import io.ktor.client.*
import io.ktor.client.request.*

data class ChatCompletionRequestMessage(val role: ChatCompletionRequestMessageRole, val content: String, val name: String?)

enum class ChatCompletionRequestMessageRole {
    system, user, assistant
}
enum class ChatCompletionResponseMessageRole {
    system, user, assistant
}

data class ChatCompletionResponseMessage(val role: ChatCompletionResponseMessageRole, val content: String)

data class CreateChatCompletionRequest(
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
     */
    var temperature: Number?,
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
     */
    var top_p: Number?,
    /**
     * How many chat completion choices to generate for each input message
     */
    var n: Number?,
    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
     */
    var stream: Boolean,

    var stop: Array<String>,
    /**
     * The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
     */
    var max_tokens: Number?,
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     */
    var presence_penalty: Number?,
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     */
    var frequency_penalty: Number?,
    /**
     * Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100.
     * Mathematically, the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    var logit_bias: Map<String, Number>?,
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     */
    var user: String?
)

fun createChatCompletionRequest(model: String, messages: Array<ChatCompletionRequestMessage>, init: CreateChatCompletionRequest.()->Unit): () -> Unit {
    val builder = HttpRequestBuilder()

    return {
        ->

    };
}

data class CreateChatCompletionResponseChoicesInner(val index: Number?, val message: ChatCompletionResponseMessage?, val finish_reason: String?)
data class CreateCompletionResponseUsage(val prompt_tokens: Number, val completion_tokens: Number, val total_tokens: Number)
data class CreateChatCompletionResponse(
    val id:String,
    val `object`: String,
    val created: Number,
    val model: String,
    val choices: Array<CreateChatCompletionResponseChoicesInner>,
    val usage: CreateCompletionResponseUsage,
)
